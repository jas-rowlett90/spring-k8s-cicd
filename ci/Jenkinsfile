pipeline {
    agent any
    
    environment {
        DOCKER_PATH = '/usr/local/bin/docker'
        PATH = "${DOCKER_PATH}:${env.PATH}"
        DOCKERHUB_CREDENTIALS = credentials('docker-cred')
        SONAR_TOKEN = credentials('sonar-token')
    }

    stages {
        stage('Build & Test') {
            steps {
                sh './mvnw clean verify'
            }
            post {
                always {
                    junit allowEmptyResults: true, testResults: 'target/surefire-reports/*.xml'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh './mvnw sonar:sonar -Dsonar.login=$SONAR_TOKEN'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def buildNumber = env.BUILD_NUMBER
                    sh "docker build -t spring-k8s-app:${buildNumber} ."
                }
            }
        }

        stage('Security Scan') {
            steps {
                sh 'trivy image spring-k8s-app:7'
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Deploy to K8s') {
            steps {
                script {
                    def buildNumber = env.BUILD_NUMBER
                    withKubeConfig([credentialsId: 'k8s-config']) {
                        sh """
                            kubectl apply -f k8s/
                            kubectl set image deployment/spring-app \
                            spring-app=spring-k8s-app:${buildNumber}
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
