pipeline {
    agent any
    environment {
        DOCKER_IMAGE = 'spring-k8s-app'
        DOCKER_TAG = "${BUILD_NUMBER}"
        SONAR_TOKEN = credentials('sonar-token')
        KUBECONFIG = credentials('k8s-config')
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Build & Test') {
            steps {
                sh './mvnw clean package'
                junit allowEmptyResults: true, testResults: '**/target/surefire-reports/*.xml'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh './mvnw sonar:sonar -Dsonar.qualitygate=Springboot-K8S-CICD'
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                }
            }
        }
        stage('Security Scan') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    sh """
                        docker run --rm \
                        -v /var/run/docker.sock:/var/run/docker.sock \
                        aquasec/trivy:0.43.1 \
                        --timeout 10m \
                        --scanners vuln \
                        --vuln-type os \
                        image ${DOCKER_IMAGE}:${DOCKER_TAG}
                    """
                }
            }
        }
        stage('Quality Gate') {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('Deploy to K8s') {
            steps {
                script {
                    sh "kubectl apply -f k8s/"
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
