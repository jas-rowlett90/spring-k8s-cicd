pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'spring-k8s-app'
        DOCKER_TAG = "${BUILD_NUMBER}"
        SONAR_TOKEN = credentials('sonar-token')
        KUBECONFIG = credentials('k8s-config')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build & Test') {
            steps {
                sh './mvnw clean package'
                junit allowEmptyResults: true, testResults: '**/target/surefire-reports/*.xml'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh "./mvnw sonar:sonar -Dsonar.projectKey=Spring-K8S-CICD -Dsonar.host.url=http://localhost:9000 -Dsonar.login=$SONAR_TOKEN"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    withEnv(['PATH+DOCKER=/usr/local/bin']) {
                        sh 'docker build -t spring-k8s-app:${BUILD_NUMBER} .'
                    }
                }
            }
        }

        stage('Security Scan') {
            steps {
                sh 'trivy image spring-k8s-app:${BUILD_NUMBER}'
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Deploy to K8s') {
            steps {
                withKubeConfig([credentialsId: 'k8s-config']) {
                    sh 'kubectl apply -f k8s/base'
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
