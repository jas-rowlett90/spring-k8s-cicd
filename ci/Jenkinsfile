pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'spring-k8s-app'
        DOCKER_TAG = "${BUILD_NUMBER}"
        SONAR_TOKEN = credentials('sonar-token')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build & Test') {
            steps {
                sh './mvnw clean package'
                junit '**/target/surefire-reports/*.xml'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh '''
                        ./mvnw sonar:sonar \
                        -Dsonar.projectKey=Spring-K8S-CICD \
                        -Dsonar.host.url=http://localhost:9000 \
                        -Dsonar.login=$SONAR_TOKEN
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dockerImage = docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                }
            }
        }

        stage('Security Scan') {
            steps {
                script {
                    // Scan filesystem
                    sh 'trivy fs --config trivy.yaml .'
                    
                    // Scan Docker image
                    sh "trivy image --config trivy.yaml ${DOCKER_IMAGE}:${DOCKER_TAG}"
                }
                // Archive results
                archiveArtifacts 'trivy-results.txt'
            }
            post {
                failure {
                    error 'Security vulnerabilities exceeded threshold'
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Deploy to K8s') {
            when {
                branch 'main'
            }
            steps {
                script {
                    sh '''
                        kubectl apply -f k8s/base/configmap.yaml
                        kubectl apply -f k8s/base/deployment.yaml
                        kubectl apply -f k8s/base/service.yaml
                        kubectl apply -f k8s/base/ingress.yaml
                    '''
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
